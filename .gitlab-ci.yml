stages:
  - build
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2

default:
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

build_image:
  stage: build
  script:
    - IMAGE_NAME="$DOCKERHUB_USERNAME/crypto-price-predictor:latest"
    - docker build -t $IMAGE_NAME .
  artifacts:
    name: "docker-image"
    paths:
      - image.tar
    expire_in: 15 minutes
  after_script:
    - IMAGE_NAME="$DOCKERHUB_USERNAME/crypto-price-predictor:latest"
    - docker save $IMAGE_NAME -o image.tar

push_image:
  stage: push
  needs:
    - build_image
  script:
    - IMAGE_NAME="$DOCKERHUB_USERNAME/crypto-price-predictor:latest"
    - docker load -i image.tar
    - docker push $IMAGE_NAME

deploy_to_ec2:
  stage: deploy
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y openssh-client coreutils
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $EC2_IP >> ~/.ssh/known_hosts
  script:
    - |
      cat << 'EOF' > deploy.sh
      echo "Checking for container on port 80..."
      existing=$(docker ps -q --filter "publish=80")
      if [ -n "$existing" ]; then
        echo "Stopping & removing existing container: $existing"
        docker rm -f $existing
      else
        echo "No container found using port 80."
      fi
      echo "Pulling updated image..."
      docker pull $DOCKERHUB_USERNAME/crypto-price-predictor:latest
      echo "Starting new container..."
      docker run -d -p 80:8000 $DOCKERHUB_USERNAME/crypto-price-predictor:latest
      EOF
    - chmod +x deploy.sh
    - ssh -i ~/.ssh/id_rsa ubuntu@$EC2_IP 'bash -s' < deploy.sh
