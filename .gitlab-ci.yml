stages:
  - test
  - build
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2

# Test Stage: Run automated tests using pytest
run_tests:
  stage: test
  image: python:3.10-slim
  script:
    - pip install -r requirements.txt
    - pip install pytest
    - pytest --maxfail=1 --disable-warnings -q

# Build Stage: Build the Docker image and save it as an artifact
build_image:
  stage: build
  script:
    - IMAGE_NAME="${DOCKERHUB_USERNAME}/crypto-price-predictor:latest"
    - docker build -t $IMAGE_NAME .
  artifacts:
    paths:
      - image.tar
    expire_in: 15 minutes
  after_script:
    - IMAGE_NAME="${DOCKERHUB_USERNAME}/crypto-price-predictor:latest"
    - docker save $IMAGE_NAME -o image.tar

# Push Stage: Load the artifact and push the image to Docker Hub
push_image:
  stage: push
  needs:
    - build_image
  script:
    - IMAGE_NAME="${DOCKERHUB_USERNAME}/crypto-price-predictor:latest"
    - docker load -i image.tar
    - docker push $IMAGE_NAME

# Deploy Stage: Deploy the new image to your EC2 instance
deploy_to_ec2:
  stage: deploy
  image: ubuntu:20.04
  before_script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $EC2_IP >> ~/.ssh/known_hosts
  script:
    - IMAGE_NAME="${DOCKERHUB_USERNAME}/crypto-price-predictor:latest"
    - >
      echo "IMAGE_NAME=${IMAGE_NAME}" > deploy.sh &&
      echo "echo 'Checking for container on port 80...'" >> deploy.sh &&
      echo "existing=\$(docker ps -q --filter 'publish=80')" >> deploy.sh &&
      echo "if [ -n \"\$existing\" ]; then" >> deploy.sh &&
      echo "  echo 'Stopping & removing existing container: \$existing'" >> deploy.sh &&
      echo "  docker rm -f \$existing" >> deploy.sh &&
      echo "else" >> deploy.sh &&
      echo "  echo 'No container found using port 80.'" >> deploy.sh &&
      echo "fi" >> deploy.sh &&
      echo "echo 'Pulling updated image...'" >> deploy.sh &&
      echo "docker pull \$IMAGE_NAME" >> deploy.sh &&
      echo "echo 'Starting new container...'" >> deploy.sh &&
      echo "docker run -d -p 80:8000 \$IMAGE_NAME" >> deploy.sh &&
      chmod +x deploy.sh &&
      ssh -i ~/.ssh/id_rsa ubuntu@$EC2_IP "bash -s" < deploy.sh
